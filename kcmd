#!/usr/bin/env node
// -*- mode: js2 -*-
let Logger = require("js-logger");
global.Logger = Logger;
Logger.useDefaults();

let _ = require("lodash");

let core = require("kitsune/core.js");

let opt = require("node-getopt").create([
    ['h', 'help', 'display this help']
])
.bindHelp()
.parseSystem();

// LOGGING //
let debugLogger = Logger.get("debug");
debugLogger.setLevel(Logger.OFF);
/////////////

let { systems } = core();

let funcs = {};

const READ_ONLY = true;

let regFunc = function(name, readOnly, func) {
    funcs[name] = { func, readOnly };
};

let funcId = "4f29cda5f5bff53168c88e3cf8f8674fd7cbc67f";
let paramId = "68b4abc42a7c4cd5dc27c9dad476a64a7014ce07";
let bindFuncId = "e6429ca88b178bd13982b6ca543c822043b609c6";

let id = "aa1c07e327111a1b0682b419d16c7728528d3ffa";

function q() {
    let func = systems(id);
    let result = func("6ebc3ddc3feff08772b0641513ceb20bd7fffaad");
    return JSON.stringify(result, null, 2);
}
regFunc("q", false, q);

function x() {
    let removeEdge = systems("c2d807f302ca499c3584a8ccf04fb7a76cf589ad");
    let writeEdge = systems("10ae12f47866d3c8e1d6cfeabb39fcf7e839a220");
    let autoWriteEdge = systems("f7b073eb5ef5680e7ba308eaf289de185f0ec3f7");
    let assign = systems("7b5e1726ccc3a1c2ac69e441900ba002c26b2f74");
    let factor = systems("c83cd0ab78a1d57609f9224f851bde6d230711d0");
    let graphFind = systems("a1e815356dceab7fded042f3032925489407c93e");

    let writeChain = systems("f7d85e5fdaa712e9ce55724d1bd2006ebc48032c");
    let traceChain = systems("b1565419b484bc440da1a81316cec147aec4e1dc");
    let getLastLink = systems("9c25645ecb274b261f1afebd115b09f6e35f7cec");
    let deleteLink = systems("c3d64c328223bc8739858c73a01b6c56986f9e74");
    let splitLink = systems("0b5e055cd86ea41c8df64b3e41235e553f564b13");
    let spliceChain = systems("f3106f372a55b1e33b3b666d5df0c9e96f06cba1");

    // let typeImpl = [
    //     // has-parent-type                          // get-parent-type
    //     ["6b79ca99d812b33ecad0ab71c206d854a4b42958","eb79c827ab87cc5a6bf0463bbc237e238f7c8128"],
    // ];
    // let items = typeImpl.map(x => autoWriteEdge({ head: x[0], tail: x[1] }));
    // writeChain({ node: "befaac09f20d43f0e9b30702c584c15d76c48de5", items }); // get-parent-node

    let firstLink = writeChain({
        node: "XXX",
        items: ["one", "two", "three", "four", "five"]
    });
    let lastLink = writeChain({
        node: firstLink,
        items: ["six", "seven", "eight", "nine"]
    });
    let link = getLastLink({ away: true, node: "XXX", limit: 2 });
    let splice = spliceChain({ away: true,
        node: link,
        deleteCount: 5,
        insert: ["AAA", "BBB", "CCC"]
    });
    console.log(traceChain({ away: true, node: "XXX" }));
    return splice;
}
regFunc("x", false, x);

function convertBindFunc() {
    let getTails = systems("a8a338d08b0ef7e532cbc343ba1e4314608024b2");
    let readEdge = systems("25cff8a2afcf560b5451d2482dbf9d9d69649f26");
    let writeEdge = systems("10ae12f47866d3c8e1d6cfeabb39fcf7e839a220");
    let autoWriteEdge = systems("f7b073eb5ef5680e7ba308eaf289de185f0ec3f7");
    let removeEdge = systems("c2d807f302ca499c3584a8ccf04fb7a76cf589ad");

    // Bind
    // let funcs = getTails("e6429ca88b178bd13982b6ca543c822043b609c6");
    // AutoParam
    let funcs = getTails("01ec9bb984b50b0a7bd0e296004ef1e74ea293a0");

    console.log(funcs);
    funcs.forEach(func => {
        let edge = readEdge(func);
        let { head, tail } = edge;

        // Transfer
        // let newHead = builder;
        let newHead = "???";
        let newTail = autoWriteEdge({ head, tail });

        removeEdge(func);
        writeEdge({ id: func, head: newHead, tail: newTail });
    });
}
regFunc("convert-bind-func", false, convertBindFunc);

function createBindFunc() {
    let writeBindFunc = systems("ccd7b9796a25b50b3d5d712392c9758e3ab6133d");
    let readBindFunc = systems("4841f107fb76dbf4ac1d29a936b16b7365985ca4");
    let autoWriteEdge = systems("f7b073eb5ef5680e7ba308eaf289de185f0ec3f7");

    let func = "f520dd0e4da481f0fbc18584a7bf8098d19d3222";
    let params = {
        "0f1f08b78146145477b91070bc82808c1d3abb45": "a8a338d08b0ef7e532cbc343ba1e4314608024b2",
        "9099cc982bc5a6998731c2579b40a3e793bba333": "890b0b96d7d239e2f246ec03b00cb4e8e06ca2c3",
    };

    writeBindFunc({ id, func, params });
    let result = readBindFunc(id);

    autoWriteEdge({ head: bindFuncId, tail: id });

    return id;
}
regFunc("create-bind-func", false, createBindFunc);

let mapManSysToFuncs = function() {
    let nameFn = systems("2885e34819b8a2f043b139bd92b96e484efd6217");
    let autoWriteEdge = systems("f7b073eb5ef5680e7ba308eaf289de185f0ec3f7");
    let mkid = systems("bf565ae1309f425b0ab00efa2ba541ae03ad22cf");
    let graphAssign = systems("7b5e1726ccc3a1c2ac69e441900ba002c26b2f74");

    let node = "4a263590d11f4ba73661c476564f7aacea8c8286";
    let name = "list-lists";
    let params = [ "getTails" ];

    nameFn({ node, name });

    params.forEach(param => {
        let argId = mkid();
        graphAssign({ head: node, type: paramId, tail: argId });
        nameFn({ node: argId, name: param });
    });

    // Add to functions
    autoWriteEdge({ head: funcId, tail: node });

    return node;
};
regFunc("map-man-sys-to-func", false, mapManSysToFuncs);

function createAutoParamFunc() {
    let writeAutoParamFunc = systems("2fb95ddb758034712fe85b8cf63c9ea1ea0570cf");
    let autoWriteEdge = systems("f7b073eb5ef5680e7ba308eaf289de185f0ec3f7");

    let id = "91aad58f3f5cf73d7edfadb6b83c2a0e556c15e2";
    let func = "2bf3bbec64d4b33302b9ab228eb90bc3f04b22a8";
    let paramName = "name";
    writeAutoParamFunc({ id, func, paramName })

    let autoParamFuncGroup = "01ec9bb984b50b0a7bd0e296004ef1e74ea293a0";
    autoWriteEdge({ head: autoParamFuncGroup, tail: id });
}
regFunc("create-auto-param-func", false, createAutoParamFunc);

regFunc("write-test", false, function() {
    writeNodeObject({ id: "this-is-the-id", obj: {
        "hello": "world",
        "what": "is-up",
        "i": "like-it"
    }});
});

regFunc("read-test", READ_ONLY, function() {
    let readNodeObject = systems("971a9f4b9f8e841b4519d96fa8733311c8b58fe2");
    return readNodeObject("this-is-the-id");
});

regFunc("fix-names", false, function() {
    let getTails = systems("a8a338d08b0ef7e532cbc343ba1e4314608024b2");
    let nameList = systems("890b0b96d7d239e2f246ec03b00cb4e8e06ca2c3");
    let hypenToCamel = systems("a3bf45bfe89ebb31dac911bfbe299fcb2ce6491c");
    let removeName = systems("708f17af0e4f537757cf8817cbca4ed016b7bb8b");
    let nameFn = systems("2885e34819b8a2f043b139bd92b96e484efd6217");

    let funcs = getTails("4f29cda5f5bff53168c88e3cf8f8674fd7cbc67f");
    let params = [];
    funcs.forEach(x => {
        let tails = getTails(x);
        params.push(tails);
    });

    params = _.flatten(params);

    params.forEach(param => {
        let name = nameList(param)[0];
        let newName = hypenToCamel(name);

        console.log(param);
        console.log(name+" => "+newName);

        if(name != newName) {
            removeName({ node: param, name });
            nameFn({ node: param, name: newName });
        }
    });

    console.log(params);
});

regFunc("graph-funcs-and-params", false, function() {
    let readFileSystem = systems("e6ff3d78ebd8f80c8945afd3499195049609905d");
    let getTails = systems("a8a338d08b0ef7e532cbc343ba1e4314608024b2");
    let graphAutoPut = systems("f7b073eb5ef5680e7ba308eaf289de185f0ec3f7");
    let graphAssign = systems("7b5e1726ccc3a1c2ac69e441900ba002c26b2f74");
    let nameFn = systems("2885e34819b8a2f043b139bd92b96e484efd6217");
    let mkid = systems("bf565ae1309f425b0ab00efa2ba541ae03ad22cf");

    let systemFiles = getTails("66564ec14ed18fb88965140fc644d7b813121c78");

    // nameFn({ node: "7f82d45a6ffb5c345f84237a621de35dd8b7b0e3", name: "another-name" });

    systemFiles.forEach(function(node) {
        let file = readFileSystem(node);
        let match = file.match(/function (\w+)\((.*)\)/);
        if(match) {
            let name = match[1];
            let args = match[2].trim();

            if(args[0] == "{")
                args = args.substr(1, args.length-2).trim();

            args = args.split(/\s*,\s*/);

            if(args[0].length == 0)
                args = null;

            console.log("===========");
            console.log(node);
            console.log("-----------");
            console.log(name, '=>', args);

            graphAutoPut({ head: funcId, tail: node });

            for(let i in args) {
                let argName = args[i];

                let argId = mkid();
                graphAssign({ head: node, type: paramId, tail: argId });
                nameFn({ node: argId, name: argName });
            };
        }
    });
});

regFunc("stat", READ_ONLY, function() {
    let getDataTime = systems("d5e195726a6a3650166a6591dc3d7619adaef98d");
    let time = getDataTime();
    console.log(time);
});

regFunc("help", READ_ONLY, function() {
    _.forEach(_.keys(funcs).sort(), value => console.log(value));
});
regFunc("mkstr", false, function(str) {
    let stringAutoPut = systems("4e63843a9bee61351b80fac49f4182bd582907b4");
    let id = stringAutoPut(str);
    console.log(id);
});
regFunc("mkid", READ_ONLY, function() {
    let hashRandom = systems("bf565ae1309f425b0ab00efa2ba541ae03ad22cf");

    let hash = hashRandom();
    console.log(hash);
});
regFunc("csf", false, function(name) {
    let createSystemFile = systems("76c55430fccd4f9e0b19c1c2b98d8a3babea81b2");
    createSystemFile(name);
});

regFunc("rmg", false, function(group, node) {
    let graphFind = systems("a1e815356dceab7fded042f3032925489407c93e");
    let graphRemove = systems("c2d807f302ca499c3584a8ccf04fb7a76cf589ad");

    let edges = graphFind({ head: group, tail: node });
    console.log(edges);
    edges.forEach(edge => graphRemove(edge.id));
});
regFunc("name", false, function(node, newName) {
    let name = systems("2885e34819b8a2f043b139bd92b96e484efd6217");
    name({ node: node, name: newName });
});
regFunc("lsname", READ_ONLY, function(id) {
    let nameList = systems("890b0b96d7d239e2f246ec03b00cb4e8e06ca2c3");
    let result = nameList(id);
    result.forEach(x => console.log(x));
});
regFunc("lsnode", READ_ONLY, function(name) {
    let idList = systems("91aad58f3f5cf73d7edfadb6b83c2a0e556c15e2");
    let result = idList(name);
    listWithDesc(result);
});
regFunc("unname", false, function(node, oldName) {
    let nameRemove = systems("708f17af0e4f537757cf8817cbca4ed016b7bb8b");
    nameRemove({ node: node, name: oldName });
});
regFunc("rename", false, function(node, oldName, newName) {
    let name = systems("2885e34819b8a2f043b139bd92b96e484efd6217");
    let nameRemove = systems("708f17af0e4f537757cf8817cbca4ed016b7bb8b");
    nameRemove({ node: node, name: oldName });
    name({ node: node, name: newName });
});
regFunc("cleanss", false, function() {
    let cleanStringSystem = systems("f3db04b0138e827a9b513ab195cc373433407f83");
    cleanStringSystem();
});
regFunc("rmsf", false, function() {
    let removeSystemFile = function({ graphFind, graphRemove, nameRemove, stringFind, stringRemove,
                                      systemFileId, systemFileName  }) {
        // TODO: Fix this, it's broken
        let groupEdge = graphFind({ head: "66564ec14ed18fb88965140fc644d7b813121c78",
                                    tail: systemFileId });
        graphRemove({ id: groupEdge[0].id });
        nameRemove({ node: groupEdge[0].tail, name: systemFileName });
        let stringNode = stringFind({ string: systemFileName });
        stringRemove({ id: stringNode[0].id });
    };
    removeSystemFile();
});


let nameList = systems("890b0b96d7d239e2f246ec03b00cb4e8e06ca2c3");
let describeNode = systems("15b16d6f586760a181f017d264c4808dc0f8bd06");
function listWithDesc(nodes) {
    nodes.forEach(node => {
        let names = nameList(node);
        let desc = describeNode(node);
        console.log(node, names);
        desc.forEach(d => {
            let names = nameList(d);
            console.log("    -", d, names)

        });
    });
}

// TODO: Move to system
function camelToHyphen(input) {
    let result = input.split(/(?=[A-Z])/).map(x => x.toLowerCase()).join("-");
    return result;
}

// Perform function
let op = opt.argv.shift();
let funcReg = funcs[op];

if(!funcReg) {
    console.error("No such command: "+op+"\n");
    console.error("Available commands:");

    funcs["help"].func();
    return 1;
}

let func = funcReg.func;
let output = func.apply(this, opt.argv);

if(typeof output != "undefined")
    console.log(output);

if(!funcReg.readOnly) {
    let saveData = systems("c2ff24899966a19f0615519692679bff2c2b8b26");
    saveData(systems, true);
}
