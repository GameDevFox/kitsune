#!/usr/bin/env node
// -*- mode: js2 -*-
let Logger = require("js-logger");
global.Logger = Logger;
Logger.useDefaults();

let _ = require("lodash");

let core = require("kitsune/core.js");
let saveData = require("kitsune/save-data.js");

let opt = require("node-getopt").create([
    ['h', 'help', 'display this help']
])
.bindHelp()
.parseSystem();

// LOGGING //
let debugLogger = Logger.get("debug");
debugLogger.setLevel(Logger.OFF);
/////////////

let { systems } = core();

let funcs = {};

funcs.x = function() {
    let readFileSystem = systems("e6ff3d78ebd8f80c8945afd3499195049609905d");
    let getTails = systems("a8a338d08b0ef7e532cbc343ba1e4314608024b2");
    let graphAutoPut = systems("f7b073eb5ef5680e7ba308eaf289de185f0ec3f7");
    let graphAssign = systems("7b5e1726ccc3a1c2ac69e441900ba002c26b2f74");
    let nameFn = systems("2885e34819b8a2f043b139bd92b96e484efd6217");
    let mkid = systems("bf565ae1309f425b0ab00efa2ba541ae03ad22cf");

    let systemFiles = getTails("66564ec14ed18fb88965140fc644d7b813121c78");

    // nameFn({ node: "7f82d45a6ffb5c345f84237a621de35dd8b7b0e3", name: "another-name" });

    let funcId = "4f29cda5f5bff53168c88e3cf8f8674fd7cbc67f";
    let paramId = "5c81ef998c44d90c3db495ec82892cf2925202f7";

    systemFiles.forEach(function(node) {
        let file = readFileSystem(node);
        let match = file.match(/function (\w+)\((.*)\)/);
        if(match) {
            let name = match[1];
            let args = match[2].trim();

            if(args[0] == "{")
                args = args.substr(1, args.length-2).trim();

            args = args.split(/\s*,\s*/);

            if(args[0].length == 0)
                args = null;

            console.log("===========");
            console.log(node);
            console.log("-----------");
            console.log(name, '=>', args);

            graphAutoPut({ head: funcId, tail: node });

            for(let i in args) {
                let arg = args[i];
                let argId = mkid();
                graphAssign({ head: node, type: paramId, tail: argId });
                nameFn({ node, name: arg });
            };
        }
    });
};

funcs.help = function() {
    _.forEach(_.keys(funcs).sort(), value => console.log(value));
};
funcs.mkstr = function(str) {
    let stringAutoPut = systems("4e63843a9bee61351b80fac49f4182bd582907b4");
    let id = stringAutoPut(str);
    console.log(id);
};
funcs.mkid = function() {
    let hashRandom = systems("bf565ae1309f425b0ab00efa2ba541ae03ad22cf");

    let hash = hashRandom();
    console.log(hash);
};
funcs.csf = function(name) {
    let createSystemFile = systems("76c55430fccd4f9e0b19c1c2b98d8a3babea81b2");
    createSystemFile(name);
};
funcs.ccn = function(name) {
    let createCoreNode = systems("a21b86930a00f7b31b5984aabb21cb5eea7efc56");
    createCoreNode(name);
};
funcs.rmg = function(group, node) {
    let graphFind = systems("a1e815356dceab7fded042f3032925489407c93e");
    let graphRemove = systems("c2d807f302ca499c3584a8ccf04fb7a76cf589ad");

    let edges = graphFind({ head: group, tail: node });
    console.log(edges);
    edges.forEach(edge => graphRemove(edge.id));
};
funcs.name = function(node, newName) {
    let name = systems("2885e34819b8a2f043b139bd92b96e484efd6217");
    name({ node: node, name: newName });
};
funcs.lsname = function(id) {
    let nameList = systems("890b0b96d7d239e2f246ec03b00cb4e8e06ca2c3");
    let result = nameList(id);
    result.forEach(x => console.log(x));
};
funcs.lsnode = function(name) {
    let idList = systems("2bf3bbec64d4b33302b9ab228eb90bc3f04b22a8");
    let result = idList(name);
    result.forEach(x => console.log(x));
};
funcs.unname = function(node, oldName) {
    let nameRemove = systems("708f17af0e4f537757cf8817cbca4ed016b7bb8b");
    nameRemove({ node: node, name: oldName });
};
funcs.rename = function(node, oldName, newName) {
    let name = systems("2885e34819b8a2f043b139bd92b96e484efd6217");
    let nameRemove = systems("708f17af0e4f537757cf8817cbca4ed016b7bb8b");
    nameRemove({ node: node, name: oldName });
    name({ node: node, name: newName });
};
funcs.cleanss = function() {
    let cleanStringSystem = systems("f3db04b0138e827a9b513ab195cc373433407f83");
    cleanStringSystem();
};
funcs.rmsf = function() {
    let removeSystemFile = function({ graphFind, graphRemove, nameRemove, stringFind, stringRemove,
                                      systemFileId, systemFileName  }) {
        // TODO: Fix this, it's broken
        let groupEdge = graphFind({ head: "66564ec14ed18fb88965140fc644d7b813121c78",
                                    tail: systemFileId });
        graphRemove({ id: groupEdge[0].id });
        nameRemove({ node: groupEdge[0].tail, name: systemFileName });
        let stringNode = stringFind({ string: systemFileName });
        stringRemove({ id: stringNode[0].id });
    };
};

// Perform function
let op = opt.argv.shift();
let func = funcs[op];

if(!func) {
    console.error("No such command: "+op+"\n");
    console.error("Available commands:");
    funcs.help();
    return 1;
}

func.apply(this, opt.argv);

saveData(systems, true);
